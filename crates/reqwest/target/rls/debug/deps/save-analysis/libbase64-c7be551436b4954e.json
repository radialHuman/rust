{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1","program":"C:\\Users\\rahul.damani\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","base64","C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=c7be551436b4954e","-C","extra-filename=-c7be551436b4954e","--out-dir","c:\\Users\\rahul.damani\\Downloads\\code\\rust\\crates\\reqwest\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\rahul.damani\\Downloads\\code\\rust\\crates\\reqwest\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\rahul.damani\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\rahul.damani\\Downloads\\code\\rust\\crates\\reqwest\\target\\rls\\debug\\deps\\libbase64-c7be551436b4954e.rmeta"},"prelude":{"crate_id":{"name":"base64","disambiguator":[7692701134560550257,8310491593131086162]},"crate_root":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src","external_crates":[{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[14664243863007151186,13029296787848565560]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\chunked_encoder.rs","num":2,"id":{"name":"core","disambiguator":[10973483057139175867,4092977820595504105]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[5344968526663694908,5854973613798060781]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14551701718388451589,8584422242678588409]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6143882857039415599,5494129795406748407]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[9037026435662606504,10577775618308791929]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15244332605556921560,15997253764330093455]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[496393125628069379,10121348063997143337]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14891368759234060001,17337422003014977783]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[9539026828135594574,18385042694178804316]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[5817650502020334249,13012108553651615857]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12364111099303107650,4225371417860886929]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[1593379990131481620,6691744023912804689]}}],"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":0,"byte_end":8415,"line_start":1,"line_end":237,"column_start":1,"column_end":3}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\read\\mod.rs","byte_start":18684,"byte_end":18697,"line_start":3,"line_end":3,"column_start":24,"column_end":37},"alias_span":null,"name":"DecoderReader","value":"","parent":{"krate":0,"index":65}},{"kind":"Use","ref_id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\mod.rs","byte_start":96334,"byte_end":96347,"line_start":3,"line_end":3,"column_start":24,"column_end":37},"alias_span":null,"name":"EncoderWriter","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4013,"byte_end":4032,"line_start":95,"line_end":95,"column_start":24,"column_end":43},"alias_span":null,"name":"encode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4112,"byte_end":4118,"line_start":97,"line_end":97,"column_start":25,"column_end":31},"alias_span":null,"name":"encode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4120,"byte_end":4133,"line_start":97,"line_end":97,"column_start":33,"column_end":46},"alias_span":null,"name":"encode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4135,"byte_end":4152,"line_start":97,"line_end":97,"column_start":48,"column_end":65},"alias_span":null,"name":"encode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4246,"byte_end":4252,"line_start":101,"line_end":101,"column_start":25,"column_end":31},"alias_span":null,"name":"decode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4254,"byte_end":4267,"line_start":101,"line_end":101,"column_start":33,"column_end":46},"alias_span":null,"name":"decode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4269,"byte_end":4286,"line_start":101,"line_end":101,"column_start":48,"column_end":65},"alias_span":null,"name":"decode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4313,"byte_end":4332,"line_start":102,"line_end":102,"column_start":25,"column_end":44},"alias_span":null,"name":"decode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4334,"byte_end":4345,"line_start":102,"line_end":102,"column_start":46,"column_end":57},"alias_span":null,"name":"DecodeError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":0,"byte_end":8415,"line_start":1,"line_end":237,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":37},{"krate":0,"index":65},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":173},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":206},{"krate":0,"index":243},{"krate":0,"index":247},{"krate":0,"index":308},{"krate":0,"index":322},{"krate":0,"index":321},{"krate":0,"index":319},{"krate":0,"index":250},{"krate":0,"index":324},{"krate":0,"index":331},{"krate":0,"index":330},{"krate":0,"index":328},{"krate":0,"index":255},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265}],"decl_id":null,"docs":" # Configs","sig":null,"attributes":[{"value":"deny(missing_docs, trivial_casts, trivial_numeric_casts,\n       unused_extern_crates, unused_import_braces, unused_results,\n       variant_size_differences, warnings)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":3318,"byte_end":3508,"line_start":61,"line_end":70,"column_start":1,"column_end":3}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":3509,"byte_end":3532,"line_start":71,"line_end":71,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\chunked_encoder.rs","byte_start":8742,"byte_end":8747,"line_start":13,"line_end":13,"column_start":10,"column_end":15},"name":"Error","qualname":"::chunked_encoder::Sink::Error","value":"type Error;","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\display.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"display","qualname":"::display","value":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\display.rs","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":60}],"decl_id":null,"docs":" Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\display.rs","byte_start":16538,"byte_end":16551,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"Base64Display","qualname":"::display::Base64Display","value":"Base64Display {  }","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":" A convenience wrapper for base64'ing bytes into a format string without heap allocation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\display.rs","byte_start":16718,"byte_end":16729,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"with_config","qualname":"<Base64Display>::with_config","value":"fn (bytes: &[u8], config: Config) -> Base64Display","parent":null,"children":[],"decl_id":null,"docs":" Create a `Base64Display` with the provided config.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\read\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\read\\mod.rs","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":114}],"decl_id":null,"docs":" Implementations of `io::Read` to transparently decode base64.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", test))","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":3866,"byte_end":3900,"line_start":88,"line_end":88,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\read\\decoder.rs","byte_start":19694,"byte_end":19707,"line_start":32,"line_end":32,"column_start":12,"column_end":25},"name":"DecoderReader","qualname":"::read::decoder::DecoderReader","value":"DecoderReader {  }","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" A `Read` implementation that decodes base64 data read from an underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\read\\decoder.rs","byte_start":21421,"byte_end":21424,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<DecoderReader>::new","value":"fn (r: &'a mut R, config: Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that will read from the provided reader `r`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\mod.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":172}],"decl_id":null,"docs":" Implementations of `io::Write` to transparently handle base64.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", test))","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":3927,"byte_end":3961,"line_start":91,"line_end":91,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\encoder.rs","byte_start":98399,"byte_end":98412,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"EncoderWriter","qualname":"::write::encoder::EncoderWriter","value":"EncoderWriter {  }","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145}],"decl_id":null,"docs":" A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\encoder.rs","byte_start":99926,"byte_end":99929,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<EncoderWriter>::new","value":"fn (w: &'a mut W, config: Config) -> EncoderWriter<'a, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that will write to the provided delegate writer `w`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\encoder.rs","byte_start":100839,"byte_end":100845,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"finish","qualname":"<EncoderWriter>::finish","value":"fn (&mut self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode all remaining buffered data and write it, including any trailing incomplete input\n triples and associated padding.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\encode.rs","byte_start":111568,"byte_end":111574,"line_start":23,"line_end":23,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode::encode","value":"fn <T> (input: T) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.\nConvenience for `encode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\encode.rs","byte_start":111507,"byte_end":111560,"line_start":22,"line_end":22,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\encode.rs","byte_start":112079,"byte_end":112092,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"encode_config","qualname":"::encode::encode_config","value":"fn <T> (input: T, config: Config) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\encode.rs","byte_start":112018,"byte_end":112071,"line_start":43,"line_end":43,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\encode.rs","byte_start":113000,"byte_end":113017,"line_start":74,"line_end":74,"column_start":8,"column_end":25},"name":"encode_config_buf","qualname":"::encode::encode_config_buf","value":"fn <T> (input: T, config: Config, buf: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nWrites into the supplied output buffer, which will grow the buffer if needed.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\encode.rs","byte_start":112939,"byte_end":112992,"line_start":73,"line_end":73,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\encode.rs","byte_start":114293,"byte_end":114312,"line_start":117,"line_end":117,"column_start":8,"column_end":27},"name":"encode_config_slice","qualname":"::encode::encode_config_slice","value":"fn <T> (input: T, config: Config, output: &mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Encode arbitrary octets as base64.\n Writes into the supplied output buffer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":135647,"byte_end":135658,"line_start":30,"line_end":30,"column_start":5,"column_end":16},"name":"InvalidByte","qualname":"::decode::DecodeError::InvalidByte","value":"DecodeError::InvalidByte(usize, u8)","parent":{"krate":0,"index":286},"children":[],"decl_id":null,"docs":" An invalid byte was found in the input. The offset and offending byte are provided.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":135719,"byte_end":135732,"line_start":32,"line_end":32,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::decode::DecodeError::InvalidLength","value":"DecodeError::InvalidLength","parent":{"krate":0,"index":286},"children":[],"decl_id":null,"docs":" The length of the input is invalid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":136075,"byte_end":136092,"line_start":37,"line_end":37,"column_start":5,"column_end":22},"name":"InvalidLastSymbol","qualname":"::decode::DecodeError::InvalidLastSymbol","value":"DecodeError::InvalidLastSymbol(usize, u8)","parent":{"krate":0,"index":286},"children":[],"decl_id":null,"docs":" The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n This is indicative of corrupted or truncated Base64.\n Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for\n symbols that are in the alphabet but represent nonsensical encodings.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":135537,"byte_end":135548,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::decode::DecodeError","value":"DecodeError::{InvalidByte, InvalidLength, InvalidLastSymbol}","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":291},{"krate":0,"index":293}],"decl_id":null,"docs":" Errors that can occur while decoding.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":137438,"byte_end":137444,"line_start":84,"line_end":84,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode::decode","value":"fn <T> (input: T) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.\nConvenience `decode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":137377,"byte_end":137430,"line_start":83,"line_end":83,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":138042,"byte_end":138055,"line_start":105,"line_end":105,"column_start":8,"column_end":21},"name":"decode_config","qualname":"::decode::decode_config","value":"fn <T> (input: T, config: Config) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":137981,"byte_end":138034,"line_start":104,"line_end":104,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":138932,"byte_end":138949,"line_start":133,"line_end":133,"column_start":8,"column_end":25},"name":"decode_config_buf","qualname":"::decode::decode_config_buf","value":"fn <T> (input: T, config: Config, buffer: &mut Vec<u8>) -> Result<(), DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nWrites into the supplied buffer to avoid allocation.\nReturns a Result containing an empty tuple, aka ().","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":138871,"byte_end":138924,"line_start":132,"line_end":132,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":140205,"byte_end":140224,"line_start":169,"line_end":169,"column_start":8,"column_end":27},"name":"decode_config_slice","qualname":"::decode::decode_config_slice","value":"fn <T> (input: T, config: Config, output: &mut [u8]) -> Result<usize, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Decode the input into the provided output slice.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4604,"byte_end":4612,"line_start":113,"line_end":113,"column_start":5,"column_end":13},"name":"Standard","qualname":"::CharacterSet::Standard","value":"CharacterSet::Standard","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" The standard character set (uses `+` and `/`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4752,"byte_end":4759,"line_start":117,"line_end":117,"column_start":5,"column_end":12},"name":"UrlSafe","qualname":"::CharacterSet::UrlSafe","value":"CharacterSet::UrlSafe","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" The URL safe character set (uses `-` and `_`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4985,"byte_end":4990,"line_start":121,"line_end":121,"column_start":5,"column_end":10},"name":"Crypt","qualname":"::CharacterSet::Crypt","value":"CharacterSet::Crypt","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":5104,"byte_end":5110,"line_start":123,"line_end":123,"column_start":5,"column_end":11},"name":"Bcrypt","qualname":"::CharacterSet::Bcrypt","value":"CharacterSet::Bcrypt","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" The bcrypt character set (uses `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":5272,"byte_end":5281,"line_start":127,"line_end":127,"column_start":5,"column_end":14},"name":"ImapMutf7","qualname":"::CharacterSet::ImapMutf7","value":"CharacterSet::ImapMutf7","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" The character set used in IMAP-modified UTF-7 (uses `+` and `,`).","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":4451,"byte_end":4463,"line_start":109,"line_end":109,"column_start":10,"column_end":22},"name":"CharacterSet","qualname":"::CharacterSet","value":"CharacterSet::{Standard, UrlSafe, Crypt, Bcrypt, ImapMutf7}","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":315},{"krate":0,"index":317}],"decl_id":null,"docs":" Available encoding character sets\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":6196,"byte_end":6202,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"name":"Config","qualname":"::Config","value":"Config {  }","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327}],"decl_id":null,"docs":" Contains configuration parameters for base64 encoding\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":6521,"byte_end":6524,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<Config>::new","value":"fn (char_set: CharacterSet, pad: bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Config`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":6759,"byte_end":6762,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"pad","qualname":"<Config>::pad","value":"fn (self, pad: bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to pad output with `=` characters.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":7044,"byte_end":7070,"line_start":182,"line_end":182,"column_start":12,"column_end":38},"name":"decode_allow_trailing_bits","qualname":"<Config>::decode_allow_trailing_bits","value":"fn (self, allow: bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to emit errors for nonzero trailing bits.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":7255,"byte_end":7263,"line_start":191,"line_end":191,"column_start":11,"column_end":19},"name":"STANDARD","qualname":"::STANDARD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set with padding.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":7433,"byte_end":7448,"line_start":198,"line_end":198,"column_start":11,"column_end":26},"name":"STANDARD_NO_PAD","qualname":"::STANDARD_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set without padding.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":7615,"byte_end":7623,"line_start":205,"line_end":205,"column_start":11,"column_end":19},"name":"URL_SAFE","qualname":"::URL_SAFE","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set with padding\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":7791,"byte_end":7806,"line_start":212,"line_end":212,"column_start":11,"column_end":26},"name":"URL_SAFE_NO_PAD","qualname":"::URL_SAFE_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set without padding\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":7967,"byte_end":7972,"line_start":219,"line_end":219,"column_start":11,"column_end":16},"name":"CRYPT","qualname":"::CRYPT","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" As per `crypt(3)` requirements\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":8121,"byte_end":8127,"line_start":226,"line_end":226,"column_start":11,"column_end":17},"name":"BCRYPT","qualname":"::BCRYPT","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Bcrypt character set\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":8289,"byte_end":8299,"line_start":233,"line_end":233,"column_start":11,"column_end":21},"name":"IMAP_MUTF7","qualname":"::IMAP_MUTF7","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" IMAP modified UTF-7 requirements\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\chunked_encoder.rs","byte_start":9098,"byte_end":9112,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\chunked_encoder.rs","byte_start":11432,"byte_end":11442,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\chunked_encoder.rs","byte_start":11617,"byte_end":11627,"line_start":100,"line_end":100,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\display.rs","byte_start":16628,"byte_end":16641,"line_start":23,"line_end":23,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\display.rs","byte_start":16920,"byte_end":16933,"line_start":33,"line_end":33,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\display.rs","byte_start":17254,"byte_end":17267,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\read\\decoder.rs","byte_start":20763,"byte_end":20776,"line_start":57,"line_end":57,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\read\\decoder.rs","byte_start":21313,"byte_end":21326,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\read\\decoder.rs","byte_start":24639,"byte_end":24652,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\encoder.rs","byte_start":99410,"byte_end":99423,"line_start":79,"line_end":79,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\encoder.rs","byte_start":99810,"byte_end":99823,"line_start":92,"line_end":92,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\encoder.rs","byte_start":103947,"byte_end":103960,"line_start":200,"line_end":200,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\encoder.rs","byte_start":110803,"byte_end":110816,"line_start":348,"line_end":348,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":136130,"byte_end":136141,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":136692,"byte_end":136703,"line_start":55,"line_end":55,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":5291,"byte_end":5303,"line_start":130,"line_end":130,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":6470,"byte_end":6476,"line_start":163,"line_end":163,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":3857,"byte_end":3864,"line_start":87,"line_end":87,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":37}},{"kind":"Mod","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":3909,"byte_end":3913,"line_start":89,"line_end":89,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":65}},{"kind":"Mod","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":3970,"byte_end":3975,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":117}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\chunked_encoder.rs","byte_start":9098,"byte_end":9112,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":17},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\chunked_encoder.rs","byte_start":11432,"byte_end":11442,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":27},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\chunked_encoder.rs","byte_start":11617,"byte_end":11627,"line_start":100,"line_end":100,"column_start":19,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":27},"to":{"krate":0,"index":13}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\display.rs","byte_start":16628,"byte_end":16641,"line_start":23,"line_end":23,"column_start":10,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\display.rs","byte_start":16920,"byte_end":16933,"line_start":33,"line_end":33,"column_start":22,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":46},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\display.rs","byte_start":17254,"byte_end":17267,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":56},"to":{"krate":0,"index":13}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\read\\decoder.rs","byte_start":20763,"byte_end":20776,"line_start":57,"line_end":57,"column_start":38,"column_end":51},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":79},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\read\\decoder.rs","byte_start":21313,"byte_end":21326,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":79},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\read\\decoder.rs","byte_start":24639,"byte_end":24652,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\encoder.rs","byte_start":99410,"byte_end":99423,"line_start":79,"line_end":79,"column_start":35,"column_end":48},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":133},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\encoder.rs","byte_start":99810,"byte_end":99823,"line_start":92,"line_end":92,"column_start":20,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\encoder.rs","byte_start":103947,"byte_end":103960,"line_start":200,"line_end":200,"column_start":30,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":133},"to":{"krate":1,"index":2903}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\write\\encoder.rs","byte_start":110803,"byte_end":110816,"line_start":348,"line_end":348,"column_start":29,"column_end":42},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":133},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":136130,"byte_end":136141,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":286},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\decode.rs","byte_start":136692,"byte_end":136703,"line_start":55,"line_end":55,"column_start":23,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":286},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":5291,"byte_end":5303,"line_start":130,"line_end":130,"column_start":6,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\base64-0.12.1\\src\\lib.rs","byte_start":6470,"byte_end":6476,"line_start":163,"line_end":163,"column_start":6,"column_end":12},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":324},"to":{"krate":4294967295,"index":4294967295}}]}