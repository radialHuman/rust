{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9","program":"C:\\Users\\rahul.damani\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","regex_automata","C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=8aab9f927f99c313","-C","extra-filename=-8aab9f927f99c313","--out-dir","c:\\Users\\rahul.damani\\Downloads\\code\\rust\\eda_1\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\rahul.damani\\Downloads\\code\\rust\\eda_1\\target\\rls\\debug\\deps","--extern","byteorder=c:\\Users\\rahul.damani\\Downloads\\code\\rust\\eda_1\\target\\rls\\debug\\deps\\libbyteorder-9cc611413024059f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\rahul.damani\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\rahul.damani\\Downloads\\code\\rust\\eda_1\\target\\rls\\debug\\deps\\libregex_automata-8aab9f927f99c313.rmeta"},"prelude":{"crate_id":{"name":"regex_automata","disambiguator":[8616263559677949993,11298360261266427647]},"crate_root":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src","external_crates":[{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[10973483057139175867,4092977820595504105]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[5344968526663694908,5854973613798060781]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14551701718388451589,8584422242678588409]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","num":4,"id":{"name":"byteorder","disambiguator":[4774801759518926921,18058406124570237986]}}],"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":0,"byte_end":15721,"line_start":1,"line_end":360,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":13930,"byte_end":13938,"line_start":299,"line_end":299,"column_start":16,"column_end":24},"alias_span":null,"name":"DenseDFA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":13953,"byte_end":13956,"line_start":300,"line_end":300,"column_start":14,"column_end":17},"alias_span":null,"name":"DFA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14032,"byte_end":14037,"line_start":303,"line_end":303,"column_start":16,"column_end":21},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14108,"byte_end":14117,"line_start":306,"line_end":306,"column_start":17,"column_end":26},"alias_span":null,"name":"SparseDFA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14137,"byte_end":14144,"line_start":307,"line_end":307,"column_start":19,"column_end":26},"alias_span":null,"name":"StateID","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14938,"byte_end":14939,"line_start":340,"line_end":340,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"DenseDFA, MASK_ANCHORED","parent":{"krate":0,"index":325}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14938,"byte_end":14939,"line_start":340,"line_end":340,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"SparseDFA","parent":{"krate":0,"index":327}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":0,"byte_end":15721,"line_start":1,"line_end":360,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":27},{"krate":0,"index":135},{"krate":0,"index":165},{"krate":0,"index":193},{"krate":0,"index":280},{"krate":0,"index":325},{"krate":0,"index":327}],"decl_id":null,"docs":"A low level regular expression library that uses deterministic finite automata.\nIt supports a rich syntax with Unicode support, has extensive options for\nconfiguring the best space vs time trade off for your use case and provides\nsupport for cheap deserialization of automata for use in `no_std` environments.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":13618,"byte_end":13640,"line_start":285,"line_end":285,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":13675,"byte_end":13681,"line_start":286,"line_end":286,"column_start":35,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31570,"byte_end":31578,"line_start":144,"line_end":144,"column_start":5,"column_end":13},"name":"Standard","qualname":"::dense_imp::DenseDFA::Standard","value":"DenseDFA::Standard(Standard<T, S>)","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" A standard DFA that does not use premultiplication or byte classes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32059,"byte_end":32068,"line_start":153,"line_end":153,"column_start":5,"column_end":14},"name":"ByteClass","qualname":"::dense_imp::DenseDFA::ByteClass","value":"DenseDFA::ByteClass(ByteClass<T, S>)","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" A DFA that shrinks its alphabet to a set of equivalence classes instead\n of using all possible byte values. Any two bytes belong to the same\n equivalence class if and only if they can be used interchangeably\n anywhere in the DFA while never discriminating between a match and a\n non-match.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32455,"byte_end":32468,"line_start":161,"line_end":161,"column_start":5,"column_end":18},"name":"Premultiplied","qualname":"::dense_imp::DenseDFA::Premultiplied","value":"DenseDFA::Premultiplied(Premultiplied<T, S>)","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" A DFA that premultiplies all of its state identifiers in its\n transition table. This saves an instruction per byte at match time\n which improves search performance.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32612,"byte_end":32634,"line_start":164,"line_end":164,"column_start":5,"column_end":27},"name":"PremultipliedByteClass","qualname":"::dense_imp::DenseDFA::PremultipliedByteClass","value":"DenseDFA::PremultipliedByteClass(PremultipliedByteClass<T, S>)","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" The default configuration of a DFA, which uses byte classes and\n premultiplies its state identifiers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32944,"byte_end":32959,"line_start":171,"line_end":171,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::dense_imp::DenseDFA::__Nonexhaustive","value":"DenseDFA::__Nonexhaustive","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31452,"byte_end":31460,"line_start":142,"line_end":142,"column_start":10,"column_end":18},"name":"DenseDFA","qualname":"::dense_imp::DenseDFA","value":"DenseDFA::{Standard, ByteClass, Premultiplied, PremultipliedByteClass, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":352}],"decl_id":null,"docs":" A dense table-based deterministic finite automaton (DFA).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":35449,"byte_end":35455,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<DenseDFA<T, S>>::as_ref","value":"fn <'a> (&'a self) -> DenseDFA<&'a [S], S>","parent":null,"children":[],"decl_id":null,"docs":" Cheaply return a borrowed version of this dense DFA. Specifically, the\n DFA returned always uses `&[S]` for its transition table while keeping\n the same state identifier representation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":37588,"byte_end":37600,"line_start":297,"line_end":297,"column_start":12,"column_end":24},"name":"memory_usage","qualname":"<DenseDFA<T, S>>::memory_usage","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory usage, in bytes, of this DFA.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47459,"byte_end":47469,"line_start":518,"line_end":518,"column_start":19,"column_end":29},"name":"from_bytes","qualname":"<DenseDFA<&'a [S], S>>::from_bytes","value":"fn (buf: &'a [u8]) -> DenseDFA<&'a [S], S>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a DFA with a specific state identifier representation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":52927,"byte_end":52935,"line_start":673,"line_end":673,"column_start":12,"column_end":20},"name":"Standard","qualname":"::dense_imp::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A standard dense DFA that does not use premultiplication or byte classes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54865,"byte_end":54874,"line_start":733,"line_end":733,"column_start":12,"column_end":21},"name":"ByteClass","qualname":"::dense_imp::ByteClass","value":"","parent":null,"children":[],"decl_id":null,"docs":" A dense DFA that shrinks its alphabet.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56812,"byte_end":56825,"line_start":794,"line_end":794,"column_start":12,"column_end":25},"name":"Premultiplied","qualname":"::dense_imp::Premultiplied","value":"","parent":null,"children":[],"decl_id":null,"docs":" A dense DFA that premultiplies all of its state identifiers in its\n transition table.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":58370,"byte_end":58392,"line_start":847,"line_end":847,"column_start":12,"column_end":34},"name":"PremultipliedByteClass","qualname":"::dense_imp::PremultipliedByteClass","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default configuration of a dense DFA, which uses byte classes and\n premultiplies its state identifiers.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116261,"byte_end":116264,"line_start":19,"line_end":19,"column_start":11,"column_end":14},"name":"DFA","qualname":"::dfa::DFA","value":"DFA","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"decl_id":null,"docs":" A trait describing the interface of a deterministic finite automaton (DFA).","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116423,"byte_end":116425,"line_start":23,"line_end":23,"column_start":10,"column_end":12},"name":"ID","qualname":"::dfa::DFA::ID","value":"type ID: StateID;","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" The representation used for state identifiers in this DFA.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116501,"byte_end":116512,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"start_state","qualname":"::dfa::DFA::start_state","value":"fn (&self) -> Self::ID","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Return the identifier of this DFA's start state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116636,"byte_end":116650,"line_start":30,"line_end":30,"column_start":8,"column_end":22},"name":"is_match_state","qualname":"::dfa::DFA::is_match_state","value":"fn (&self, id: Self::ID) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns true if and only if the given identifier corresponds to a match\n state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116885,"byte_end":116898,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"is_dead_state","qualname":"::dfa::DFA::is_dead_state","value":"fn (&self, id: Self::ID) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns true if and only if the given identifier corresponds to a dead\n state. When a DFA enters a dead state, it is impossible to leave and\n thus can never lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117385,"byte_end":117407,"line_start":45,"line_end":45,"column_start":8,"column_end":30},"name":"is_match_or_dead_state","qualname":"::dfa::DFA::is_match_or_dead_state","value":"fn (&self, id: Self::ID) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns true if and only if the given identifier corresponds to either\n a dead state or a match state, such that one of `is_match_state(id)`\n or `is_dead_state(id)` must return true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117614,"byte_end":117625,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"is_anchored","qualname":"::dfa::DFA::is_anchored","value":"fn (&self) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns true if and only if this DFA is anchored.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117877,"byte_end":117887,"line_start":56,"line_end":56,"column_start":8,"column_end":18},"name":"next_state","qualname":"::dfa::DFA::next_state","value":"fn (&self, current: Self::ID, input: u8) -> Self::ID","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Given the current state that this DFA is in and the next input byte,\n this method returns the identifier of the next state. The identifier\n returned is always valid, but it may correspond to a dead state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118330,"byte_end":118350,"line_start":63,"line_end":63,"column_start":15,"column_end":35},"name":"next_state_unchecked","qualname":"::dfa::DFA::next_state_unchecked","value":"fn (&self, current: Self::ID, input: u8) -> Self::ID","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Like `next_state`, but its implementation may look up the next state\n without memory safety checks such as bounds checks. As such, callers\n must ensure that the given identifier corresponds to a valid DFA\n state. Implementors must, in turn, ensure that this routine is safe\n for all valid state identifiers and for all possible `u8` values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119310,"byte_end":119318,"line_start":91,"line_end":91,"column_start":8,"column_end":16},"name":"is_match","qualname":"::dfa::DFA::is_match","value":"fn (&self, bytes: &[u8]) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns true if and only if the given bytes match this DFA.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119293,"byte_end":119302,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120455,"byte_end":120469,"line_start":121,"line_end":121,"column_start":8,"column_end":22},"name":"shortest_match","qualname":"::dfa::DFA::shortest_match","value":"fn (&self, bytes: &[u8]) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the first position at which a match is found.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120438,"byte_end":120447,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122753,"byte_end":122757,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"find","qualname":"::dfa::DFA::find","value":"fn (&self, bytes: &[u8]) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the end offset of the longest match. If no match exists,\n then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122736,"byte_end":122745,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123958,"byte_end":123963,"line_start":199,"line_end":199,"column_start":8,"column_end":13},"name":"rfind","qualname":"::dfa::DFA::rfind","value":"fn (&self, bytes: &[u8]) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the start offset of the longest match in reverse, by searching\n from the end of the input towards the start of the input. If no match\n exists, then `None` is returned. In other words, this has the same\n match semantics as `find`, but in reverse.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123941,"byte_end":123950,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":124381,"byte_end":124392,"line_start":210,"line_end":210,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::dfa::DFA::is_match_at","value":"fn (&self, bytes: &[u8], start: usize) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the same as `is_match`, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":124364,"byte_end":124373,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":125261,"byte_end":125278,"line_start":235,"line_end":235,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::dfa::DFA::shortest_match_at","value":"fn (&self, bytes: &[u8], start: usize) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the same as `shortest_match`, but starts the search at the\n given offset.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":125244,"byte_end":125253,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":126305,"byte_end":126312,"line_start":264,"line_end":264,"column_start":8,"column_end":15},"name":"find_at","qualname":"::dfa::DFA::find_at","value":"fn (&self, bytes: &[u8], start: usize) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the same as `find`, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":126288,"byte_end":126297,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":127418,"byte_end":127426,"line_start":296,"line_end":296,"column_start":8,"column_end":16},"name":"rfind_at","qualname":"::dfa::DFA::rfind_at","value":"fn (&self, bytes: &[u8], start: usize) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the same as `rfind`, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"inline(never)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":127394,"byte_end":127410,"line_start":295,"line_end":295,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133516,"byte_end":133521,"line_start":109,"line_end":109,"column_start":12,"column_end":17},"name":"Regex","qualname":"::regex::Regex","value":"Regex {  }","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435}],"decl_id":null,"docs":" A regular expression that uses deterministic finite automata for fast\n searching.","sig":null,"attributes":[{"value":"cfg(not (feature = \"std\"))","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133452,"byte_end":133480,"line_start":107,"line_end":107,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136319,"byte_end":136327,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex<D>>::is_match","value":"fn (&self, input: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given bytes match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137327,"byte_end":137341,"line_start":217,"line_end":217,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex<D>>::shortest_match","value":"fn (&self, input: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first position at which a match is found.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138903,"byte_end":138907,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex<D>>::find","value":"fn (&self, input: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end offset of the leftmost first match. If no\n match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139313,"byte_end":139324,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex<D>>::is_match_at","value":"fn (&self, input: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `is_match`, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139750,"byte_end":139767,"line_start":272,"line_end":272,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex<D>>::shortest_match_at","value":"fn (&self, input: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `shortest_match`, but starts the search at the\n given offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140229,"byte_end":140236,"line_start":286,"line_end":286,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex<D>>::find_at","value":"fn (&self, input: &[u8], start: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `find`, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141718,"byte_end":141727,"line_start":326,"line_end":326,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex<D>>::find_iter","value":"fn <'r, 't> (&'r self, input: &'t [u8]) -> Matches<'r, 't, D>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping leftmost first matches\n in the given bytes. If no match exists, then the iterator yields no\n elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143994,"byte_end":144003,"line_start":388,"line_end":388,"column_start":12,"column_end":21},"name":"from_dfas","qualname":"<Regex<D>>::from_dfas","value":"fn (forward: D, reverse: D) -> Regex<D>","parent":null,"children":[],"decl_id":null,"docs":" Build a new regex from its constituent forward and reverse DFAs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144163,"byte_end":144170,"line_start":393,"line_end":393,"column_start":12,"column_end":19},"name":"forward","qualname":"<Regex<D>>::forward","value":"fn (&self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying DFA responsible for forward matching.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144294,"byte_end":144301,"line_start":398,"line_end":398,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Regex<D>>::reverse","value":"fn (&self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying DFA responsible for reverse matching.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144928,"byte_end":144935,"line_start":415,"line_end":415,"column_start":12,"column_end":19},"name":"Matches","qualname":"::regex::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449}],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular search.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165576,"byte_end":165584,"line_start":111,"line_end":111,"column_start":5,"column_end":13},"name":"Standard","qualname":"::sparse_imp::SparseDFA::Standard","value":"SparseDFA::Standard(Standard<T, S>)","parent":{"krate":0,"index":460},"children":[],"decl_id":null,"docs":" A standard DFA that does not use byte classes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166310,"byte_end":166319,"line_start":123,"line_end":123,"column_start":5,"column_end":14},"name":"ByteClass","qualname":"::sparse_imp::SparseDFA::ByteClass","value":"SparseDFA::ByteClass(ByteClass<T, S>)","parent":{"krate":0,"index":460},"children":[],"decl_id":null,"docs":" A DFA that shrinks its alphabet to a set of equivalence classes instead\n of using all possible byte values. Any two bytes belong to the same\n equivalence class if and only if they can be used interchangeably\n anywhere in the DFA while never discriminating between a match and a\n non-match.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166616,"byte_end":166631,"line_start":130,"line_end":130,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::sparse_imp::SparseDFA::__Nonexhaustive","value":"SparseDFA::__Nonexhaustive","parent":{"krate":0,"index":460},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165469,"byte_end":165478,"line_start":109,"line_end":109,"column_start":10,"column_end":19},"name":"SparseDFA","qualname":"::sparse_imp::SparseDFA","value":"SparseDFA::{Standard, ByteClass, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":469}],"decl_id":null,"docs":" A sparse table-based deterministic finite automaton (DFA).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":169031,"byte_end":169037,"line_start":198,"line_end":198,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<SparseDFA<T, S>>::as_ref","value":"fn <'a> (&'a self) -> SparseDFA<&'a [u8], S>","parent":null,"children":[],"decl_id":null,"docs":" Cheaply return a borrowed version of this sparse DFA. Specifically, the\n DFA returned always uses `&[u8]` for its transition table while keeping\n the same state identifier representation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":170577,"byte_end":170589,"line_start":237,"line_end":237,"column_start":12,"column_end":24},"name":"memory_usage","qualname":"<SparseDFA<T, S>>::memory_usage","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory usage, in bytes, of this DFA.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178431,"byte_end":178441,"line_start":410,"line_end":410,"column_start":19,"column_end":29},"name":"from_bytes","qualname":"<SparseDFA<&'a [u8], S>>::from_bytes","value":"fn (buf: &'a [u8]) -> SparseDFA<&'a [u8], S>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a sparse DFA with a specific state identifier\n representation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181828,"byte_end":181836,"line_start":510,"line_end":510,"column_start":12,"column_end":20},"name":"Standard","qualname":"::sparse_imp::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A standard sparse DFA that does not use premultiplication or byte classes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183890,"byte_end":183899,"line_start":571,"line_end":571,"column_start":12,"column_end":21},"name":"ByteClass","qualname":"::sparse_imp::ByteClass","value":"","parent":null,"children":[],"decl_id":null,"docs":" A sparse DFA that shrinks its alphabet.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212365,"byte_end":212372,"line_start":115,"line_end":115,"column_start":18,"column_end":25},"name":"StateID","qualname":"::state_id::StateID","value":"StateID: Clone + Copy + Debug + Eq + Hash + PartialEq + PartialOrd + Ord","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294}],"decl_id":null,"docs":" A trait describing the representation of a DFA's state identifier.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212713,"byte_end":212723,"line_start":123,"line_end":123,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::state_id::StateID::from_usize","value":"fn (n: usize) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert from a `usize` to this implementation's representation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213215,"byte_end":213223,"line_start":133,"line_end":133,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::state_id::StateID::to_usize","value":"fn (self) -> usize","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert this implementation's representation to a `usize`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213439,"byte_end":213445,"line_start":139,"line_end":139,"column_start":8,"column_end":14},"name":"max_id","qualname":"::state_id::StateID::max_id","value":"fn () -> usize","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Return the maximum state identifier supported by this representation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213678,"byte_end":213688,"line_start":146,"line_end":146,"column_start":8,"column_end":18},"name":"read_bytes","qualname":"::state_id::StateID::read_bytes","value":"fn (slice: &[u8]) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Read a single state identifier from the given slice of bytes in native\n endian format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213927,"byte_end":213938,"line_start":153,"line_end":153,"column_start":8,"column_end":19},"name":"write_bytes","qualname":"::state_id::StateID::write_bytes","value":"fn (self, slice: &mut [u8]) -> ()","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Write this state identifier to the given slice of bytes in native\n endian format.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14907,"byte_end":14912,"line_start":339,"line_end":339,"column_start":9,"column_end":14},"name":"dense","qualname":"::dense","value":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":326}],"decl_id":null,"docs":" Types and routines specific to dense DFAs.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15684,"byte_end":15690,"line_start":358,"line_end":358,"column_start":9,"column_end":15},"name":"sparse","qualname":"::sparse","value":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":328}],"decl_id":null,"docs":" Types and routines specific to sparse DFAs.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\classes.rs","byte_start":16056,"byte_end":16067,"line_start":11,"line_end":11,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\classes.rs","byte_start":19491,"byte_end":19502,"line_start":110,"line_end":110,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32996,"byte_end":33004,"line_start":174,"line_end":174,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":35213,"byte_end":35221,"line_start":240,"line_end":240,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44283,"byte_end":44291,"line_start":454,"line_end":454,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":48392,"byte_end":48400,"line_start":546,"line_end":546,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":53017,"byte_end":53025,"line_start":675,"line_end":675,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54956,"byte_end":54965,"line_start":735,"line_end":735,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56907,"byte_end":56920,"line_start":796,"line_end":796,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":58474,"byte_end":58496,"line_start":849,"line_end":849,"column_start":41,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":64464,"byte_end":64468,"line_start":1011,"line_end":1011,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":74662,"byte_end":74666,"line_start":1297,"line_end":1297,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135560,"byte_end":135565,"line_start":172,"line_end":172,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":145077,"byte_end":145084,"line_start":422,"line_end":422,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":145270,"byte_end":145277,"line_start":428,"line_end":428,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":168792,"byte_end":168801,"line_start":194,"line_end":194,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175287,"byte_end":175296,"line_start":345,"line_end":345,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178583,"byte_end":178592,"line_start":415,"line_end":415,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181928,"byte_end":181936,"line_start":512,"line_end":512,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183991,"byte_end":184000,"line_start":573,"line_end":573,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":185211,"byte_end":185215,"line_start":626,"line_end":626,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":193045,"byte_end":193049,"line_start":856,"line_end":856,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":201792,"byte_end":201797,"line_start":1096,"line_end":1096,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\classes.rs","byte_start":16056,"byte_end":16067,"line_start":11,"line_end":11,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\classes.rs","byte_start":19491,"byte_end":19502,"line_start":110,"line_end":110,"column_start":21,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":329},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32996,"byte_end":33004,"line_start":174,"line_end":174,"column_start":33,"column_end":41},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":35213,"byte_end":35221,"line_start":240,"line_end":240,"column_start":33,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44283,"byte_end":44291,"line_start":454,"line_end":454,"column_start":22,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":48392,"byte_end":48400,"line_start":546,"line_end":546,"column_start":41,"column_end":49},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":337},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":53017,"byte_end":53025,"line_start":675,"line_end":675,"column_start":41,"column_end":49},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":362},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54956,"byte_end":54965,"line_start":735,"line_end":735,"column_start":41,"column_end":50},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":375},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56907,"byte_end":56920,"line_start":796,"line_end":796,"column_start":41,"column_end":54},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":388},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":58474,"byte_end":58496,"line_start":849,"line_end":849,"column_start":41,"column_end":63},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":401},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":64464,"byte_end":64468,"line_start":1011,"line_end":1011,"column_start":33,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":74662,"byte_end":74666,"line_start":1297,"line_end":1297,"column_start":22,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135560,"byte_end":135565,"line_start":172,"line_end":172,"column_start":14,"column_end":19},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":145077,"byte_end":145084,"line_start":422,"line_end":422,"column_start":22,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":145270,"byte_end":145277,"line_start":428,"line_end":428,"column_start":35,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":442},"to":{"krate":1,"index":3653}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":168792,"byte_end":168801,"line_start":194,"line_end":194,"column_start":34,"column_end":43},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175287,"byte_end":175296,"line_start":345,"line_end":345,"column_start":22,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178583,"byte_end":178592,"line_start":415,"line_end":415,"column_start":42,"column_end":51},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":460},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181928,"byte_end":181936,"line_start":512,"line_end":512,"column_start":42,"column_end":50},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":479},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183991,"byte_end":184000,"line_start":573,"line_end":573,"column_start":42,"column_end":51},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":492},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":185211,"byte_end":185215,"line_start":626,"line_end":626,"column_start":34,"column_end":38},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":193045,"byte_end":193049,"line_start":856,"line_end":856,"column_start":22,"column_end":26},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":201792,"byte_end":201797,"line_start":1096,"line_end":1096,"column_start":22,"column_end":27},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212378,"byte_end":212383,"line_start":116,"line_end":116,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2181},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212386,"byte_end":212390,"line_start":116,"line_end":116,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":1543},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212393,"byte_end":212398,"line_start":116,"line_end":116,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":7643},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212401,"byte_end":212403,"line_start":116,"line_end":116,"column_start":28,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":2045},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212406,"byte_end":212410,"line_start":116,"line_end":116,"column_start":33,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":7285},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212413,"byte_end":212422,"line_start":116,"line_end":116,"column_start":40,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":2040},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212425,"byte_end":212435,"line_start":116,"line_end":116,"column_start":52,"column_end":62},"kind":"SuperTrait","from":{"krate":1,"index":2077},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212438,"byte_end":212441,"line_start":116,"line_end":116,"column_start":65,"column_end":68},"kind":"SuperTrait","from":{"krate":1,"index":2066},"to":{"krate":0,"index":289}}]}