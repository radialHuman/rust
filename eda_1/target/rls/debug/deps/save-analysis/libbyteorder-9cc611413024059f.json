{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4","program":"C:\\Users\\rahul.damani\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","byteorder","C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=9cc611413024059f","-C","extra-filename=-9cc611413024059f","--out-dir","c:\\Users\\rahul.damani\\Downloads\\code\\rust\\eda_1\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\rahul.damani\\Downloads\\code\\rust\\eda_1\\target\\rls\\debug\\deps","--cap-lints","allow","--cfg","byteorder_i128","--error-format=json","--sysroot","C:\\Users\\rahul.damani\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\rahul.damani\\Downloads\\code\\rust\\eda_1\\target\\rls\\debug\\deps\\libbyteorder-9cc611413024059f.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[4774801759518926921,18058406124570237986]},"crate_root":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src","external_crates":[{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[10973483057139175867,4092977820595504105]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[5344968526663694908,5854973613798060781]}},{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14551701718388451589,8584422242678588409]}}],"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":0,"byte_end":104497,"line_start":1,"line_end":3365,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":0,"byte_end":104497,"line_start":1,"line_end":3365,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":18},{"krate":0,"index":159},{"krate":0,"index":176},{"krate":0,"index":175},{"krate":0,"index":173},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":167},{"krate":0,"index":165},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":160},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":178},{"krate":0,"index":195},{"krate":0,"index":194},{"krate":0,"index":192},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":186},{"krate":0,"index":184},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":179},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":130}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":2404,"byte_end":2425,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":2427,"byte_end":2449,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":2484,"byte_end":2490,"line_start":74,"line_end":74,"column_start":35,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":4550,"byte_end":4556,"line_start":185,"line_end":185,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":5802,"byte_end":5811,"line_start":225,"line_end":225,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":6046,"byte_end":6054,"line_start":234,"line_end":234,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"fn (buf: &[u8]) -> u16","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":6563,"byte_end":6571,"line_start":253,"line_end":253,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from `buf`, stored in u32.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":7104,"byte_end":7112,"line_start":274,"line_end":274,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":7637,"byte_end":7645,"line_start":293,"line_end":293,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::ByteOrder::read_u48","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from `buf`, stored in u64.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":8178,"byte_end":8186,"line_start":314,"line_end":314,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":8706,"byte_end":8715,"line_start":334,"line_end":334,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::ByteOrder::read_u128","value":"fn (buf: &[u8]) -> u128","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads an unsigned 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":8676,"byte_end":8698,"line_start":333,"line_end":333,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":9259,"byte_end":9268,"line_start":354,"line_end":354,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"fn (buf: &[u8], nbytes: usize) -> u64","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":9860,"byte_end":9872,"line_start":375,"line_end":375,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::ByteOrder::read_uint128","value":"fn (buf: &[u8], nbytes: usize) -> u128","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":9830,"byte_end":9852,"line_start":374,"line_end":374,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":10370,"byte_end":10379,"line_start":394,"line_end":394,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"fn (buf: &mut [u8], n: u16) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":10896,"byte_end":10905,"line_start":413,"line_end":413,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":11450,"byte_end":11459,"line_start":434,"line_end":434,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":11992,"byte_end":12001,"line_start":453,"line_end":453,"column_start":8,"column_end":17},"name":"write_u48","qualname":"::ByteOrder::write_u48","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":12546,"byte_end":12555,"line_start":474,"line_end":474,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":13083,"byte_end":13093,"line_start":494,"line_end":494,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::ByteOrder::write_u128","value":"fn (buf: &mut [u8], n: u128) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":13053,"byte_end":13075,"line_start":493,"line_end":493,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":13683,"byte_end":13693,"line_start":514,"line_end":514,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"fn (buf: &mut [u8], n: u64, nbytes: usize) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":14331,"byte_end":14344,"line_start":535,"line_end":535,"column_start":8,"column_end":21},"name":"write_uint128","qualname":"::ByteOrder::write_uint128","value":"fn (buf: &mut [u8], n: u128, nbytes: usize) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":14301,"byte_end":14323,"line_start":534,"line_end":534,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":14857,"byte_end":14865,"line_start":555,"line_end":555,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"fn (buf: &[u8]) -> i16","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":14840,"byte_end":14849,"line_start":554,"line_end":554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":15429,"byte_end":15437,"line_start":577,"line_end":577,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from `buf`, stored in i32.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":15412,"byte_end":15421,"line_start":576,"line_end":576,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":15982,"byte_end":15990,"line_start":599,"line_end":599,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":15965,"byte_end":15974,"line_start":598,"line_end":598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":16570,"byte_end":16578,"line_start":621,"line_end":621,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::ByteOrder::read_i48","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from `buf`, stored in i64.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":16553,"byte_end":16562,"line_start":620,"line_end":620,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":17131,"byte_end":17139,"line_start":643,"line_end":643,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":17114,"byte_end":17123,"line_start":642,"line_end":642,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":17722,"byte_end":17731,"line_start":666,"line_end":666,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::ByteOrder::read_i128","value":"fn (buf: &[u8]) -> i128","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads a signed 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":17678,"byte_end":17700,"line_start":664,"line_end":664,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":17705,"byte_end":17714,"line_start":665,"line_end":665,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":18329,"byte_end":18337,"line_start":689,"line_end":689,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"fn (buf: &[u8], nbytes: usize) -> i64","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":18312,"byte_end":18321,"line_start":688,"line_end":688,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":19004,"byte_end":19015,"line_start":713,"line_end":713,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::ByteOrder::read_int128","value":"fn (buf: &[u8], nbytes: usize) -> i128","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":18960,"byte_end":18982,"line_start":711,"line_end":711,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":18987,"byte_end":18996,"line_start":712,"line_end":712,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":19633,"byte_end":19641,"line_start":736,"line_end":736,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"fn (buf: &[u8]) -> f32","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":19616,"byte_end":19625,"line_start":735,"line_end":735,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":20261,"byte_end":20269,"line_start":759,"line_end":759,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"fn (buf: &[u8]) -> f64","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":20244,"byte_end":20253,"line_start":758,"line_end":758,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":20842,"byte_end":20851,"line_start":781,"line_end":781,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"fn (buf: &mut [u8], n: i16) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":20825,"byte_end":20834,"line_start":780,"line_end":780,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":21427,"byte_end":21436,"line_start":803,"line_end":803,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer `n` to `buf`, stored in i32.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":21410,"byte_end":21419,"line_start":802,"line_end":802,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":21993,"byte_end":22002,"line_start":825,"line_end":825,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":21976,"byte_end":21985,"line_start":824,"line_end":824,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":22594,"byte_end":22603,"line_start":847,"line_end":847,"column_start":8,"column_end":17},"name":"write_i48","qualname":"::ByteOrder::write_i48","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer `n` to `buf`, stored in i64.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":22577,"byte_end":22586,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":23168,"byte_end":23177,"line_start":869,"line_end":869,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":23151,"byte_end":23160,"line_start":868,"line_end":868,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":23779,"byte_end":23789,"line_start":892,"line_end":892,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::ByteOrder::write_i128","value":"fn (buf: &mut [u8], n: i128) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":23735,"byte_end":23757,"line_start":890,"line_end":890,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":23762,"byte_end":23771,"line_start":891,"line_end":891,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":24430,"byte_end":24439,"line_start":915,"line_end":915,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"fn (buf: &mut [u8], n: i64, nbytes: usize) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":24413,"byte_end":24422,"line_start":914,"line_end":914,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":25158,"byte_end":25170,"line_start":939,"line_end":939,"column_start":8,"column_end":20},"name":"write_int128","qualname":"::ByteOrder::write_int128","value":"fn (buf: &mut [u8], n: i128, nbytes: usize) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":25114,"byte_end":25136,"line_start":937,"line_end":937,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":25141,"byte_end":25150,"line_start":938,"line_end":938,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":25800,"byte_end":25809,"line_start":962,"line_end":962,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"fn (buf: &mut [u8], n: f32) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":25783,"byte_end":25792,"line_start":961,"line_end":961,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":26458,"byte_end":26467,"line_start":986,"line_end":986,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"fn (buf: &mut [u8], n: f64) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":26441,"byte_end":26450,"line_start":985,"line_end":985,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":27242,"byte_end":27255,"line_start":1012,"line_end":1012,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"fn (src: &[u8], dst: &mut [u16]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":27935,"byte_end":27948,"line_start":1035,"line_end":1035,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":28628,"byte_end":28641,"line_start":1058,"line_end":1058,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":29353,"byte_end":29367,"line_start":1082,"line_end":1082,"column_start":8,"column_end":22},"name":"read_u128_into","qualname":"::ByteOrder::read_u128_into","value":"fn (src: &[u8], dst: &mut [u128]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":29323,"byte_end":29345,"line_start":1081,"line_end":1081,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":30053,"byte_end":30066,"line_start":1106,"line_end":1106,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"fn (src: &[u8], dst: &mut [i16]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads signed 16 bit integers from `src` to `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":30036,"byte_end":30045,"line_start":1105,"line_end":1105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":30920,"byte_end":30933,"line_start":1135,"line_end":1135,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"fn (src: &[u8], dst: &mut [i32]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":30903,"byte_end":30912,"line_start":1134,"line_end":1134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":31788,"byte_end":31801,"line_start":1164,"line_end":1164,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"fn (src: &[u8], dst: &mut [i64]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":31771,"byte_end":31780,"line_start":1163,"line_end":1163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":32688,"byte_end":32702,"line_start":1194,"line_end":1194,"column_start":8,"column_end":22},"name":"read_i128_into","qualname":"::ByteOrder::read_i128_into","value":"fn (src: &[u8], dst: &mut [i128]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":32644,"byte_end":32666,"line_start":1192,"line_end":1192,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":32671,"byte_end":32680,"line_start":1193,"line_end":1193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":33615,"byte_end":33628,"line_start":1224,"line_end":1224,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::ByteOrder::read_f32_into","value":"fn (src: &[u8], dst: &mut [f32]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":33598,"byte_end":33607,"line_start":1223,"line_end":1223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":34720,"byte_end":34743,"line_start":1258,"line_end":1258,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"fn (src: &[u8], dst: &mut [f32]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":34627,"byte_end":34636,"line_start":1256,"line_end":1256,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":34641,"byte_end":34712,"line_start":1257,"line_end":1257,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":35537,"byte_end":35550,"line_start":1285,"line_end":1285,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::ByteOrder::read_f64_into","value":"fn (src: &[u8], dst: &mut [f64]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":35520,"byte_end":35529,"line_start":1284,"line_end":1284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":36651,"byte_end":36674,"line_start":1320,"line_end":1320,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"fn (src: &[u8], dst: &mut [f64]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":36558,"byte_end":36567,"line_start":1318,"line_end":1318,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":36572,"byte_end":36643,"line_start":1319,"line_end":1319,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":37400,"byte_end":37414,"line_start":1345,"line_end":1345,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"fn (src: &[u16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":38095,"byte_end":38109,"line_start":1368,"line_end":1368,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"fn (src: &[u32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":38790,"byte_end":38804,"line_start":1391,"line_end":1391,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"fn (src: &[u64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":39517,"byte_end":39532,"line_start":1415,"line_end":1415,"column_start":8,"column_end":23},"name":"write_u128_into","qualname":"::ByteOrder::write_u128_into","value":"fn (src: &[u128], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":39487,"byte_end":39509,"line_start":1414,"line_end":1414,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":40560,"byte_end":40573,"line_start":1444,"line_end":1444,"column_start":8,"column_end":21},"name":"write_i8_into","qualname":"::ByteOrder::write_i8_into","value":"fn (src: &[i8], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes signed 8 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":41397,"byte_end":41411,"line_start":1472,"line_end":1472,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"fn (src: &[i16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes signed 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":42248,"byte_end":42262,"line_start":1500,"line_end":1500,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"fn (src: &[i32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":43099,"byte_end":43113,"line_start":1528,"line_end":1528,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"fn (src: &[i64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":43982,"byte_end":43997,"line_start":1557,"line_end":1557,"column_start":8,"column_end":23},"name":"write_i128_into","qualname":"::ByteOrder::write_i128_into","value":"fn (src: &[i128], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":43952,"byte_end":43974,"line_start":1556,"line_end":1556,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":44923,"byte_end":44937,"line_start":1588,"line_end":1588,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"fn (src: &[f32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":45861,"byte_end":45875,"line_start":1619,"line_end":1619,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"fn (src: &[f64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Writes IEEE754 double-precision (8 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":46616,"byte_end":46630,"line_start":1643,"line_end":1643,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"fn (numbers: &mut [u16]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 16 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":47205,"byte_end":47219,"line_start":1662,"line_end":1662,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"fn (numbers: &mut [u32]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 32 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":47794,"byte_end":47808,"line_start":1681,"line_end":1681,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"fn (numbers: &mut [u64]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 64 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":48414,"byte_end":48429,"line_start":1701,"line_end":1701,"column_start":8,"column_end":23},"name":"from_slice_u128","qualname":"::ByteOrder::from_slice_u128","value":"fn (numbers: &mut [u128]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":48384,"byte_end":48406,"line_start":1700,"line_end":1700,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":49015,"byte_end":49029,"line_start":1721,"line_end":1721,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"fn (src: &mut [i16]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":48998,"byte_end":49007,"line_start":1720,"line_end":1720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":49767,"byte_end":49781,"line_start":1746,"line_end":1746,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"fn (src: &mut [i32]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":49750,"byte_end":49759,"line_start":1745,"line_end":1745,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":50519,"byte_end":50533,"line_start":1771,"line_end":1771,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"fn (src: &mut [i64]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":50502,"byte_end":50511,"line_start":1770,"line_end":1770,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":51302,"byte_end":51317,"line_start":1797,"line_end":1797,"column_start":8,"column_end":23},"name":"from_slice_i128","qualname":"::ByteOrder::from_slice_i128","value":"fn (src: &mut [i128]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":51258,"byte_end":51280,"line_start":1795,"line_end":1795,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":51285,"byte_end":51294,"line_start":1796,"line_end":1796,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":51741,"byte_end":51755,"line_start":1809,"line_end":1809,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"fn (numbers: &mut [f32]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 single-precision (4 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":52025,"byte_end":52039,"line_start":1816,"line_end":1816,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"fn (numbers: &mut [f64]) -> ()","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 double-precision (8 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":52550,"byte_end":52559,"line_start":1836,"line_end":1836,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"BigEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":52758,"byte_end":52760,"line_start":1847,"line_end":1847,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`BigEndian`].","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":53275,"byte_end":53287,"line_start":1866,"line_end":1866,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"LittleEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":53504,"byte_end":53506,"line_start":1877,"line_end":1877,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`LittleEndian`].","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":54231,"byte_end":54244,"line_start":1903,"line_end":1903,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":54558,"byte_end":54570,"line_start":1914,"line_end":1914,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":54516,"byte_end":54548,"line_start":1913,"line_end":1913,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":4586,"byte_end":4598,"line_start":186,"line_end":186,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":4629,"byte_end":4638,"line_start":187,"line_end":187,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":52581,"byte_end":52590,"line_start":1838,"line_end":1838,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":53309,"byte_end":53321,"line_start":1868,"line_end":1868,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":56811,"byte_end":56820,"line_start":1994,"line_end":1994,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":62496,"byte_end":62508,"line_start":2209,"line_end":2209,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":4586,"byte_end":4598,"line_start":186,"line_end":186,"column_start":28,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":178},"to":{"krate":0,"index":15}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":4629,"byte_end":4638,"line_start":187,"line_end":187,"column_start":28,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":159},"to":{"krate":0,"index":15}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":5818,"byte_end":5823,"line_start":226,"line_end":226,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2181},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":5826,"byte_end":5830,"line_start":226,"line_end":226,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":1543},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":5833,"byte_end":5838,"line_start":226,"line_end":226,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":7643},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":5841,"byte_end":5848,"line_start":226,"line_end":226,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2206},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":5851,"byte_end":5853,"line_start":226,"line_end":226,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2045},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":5856,"byte_end":5860,"line_start":226,"line_end":226,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":7285},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":5863,"byte_end":5866,"line_start":226,"line_end":226,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":2066},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":5869,"byte_end":5878,"line_start":226,"line_end":226,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":1,"index":2040},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":5881,"byte_end":5891,"line_start":226,"line_end":226,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":1,"index":2077},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":5907,"byte_end":5913,"line_start":227,"line_end":227,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":15},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":52581,"byte_end":52590,"line_start":1838,"line_end":1838,"column_start":18,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":159},"to":{"krate":1,"index":2206}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":53309,"byte_end":53321,"line_start":1868,"line_end":1868,"column_start":18,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":178},"to":{"krate":1,"index":2206}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":56811,"byte_end":56820,"line_start":1994,"line_end":1994,"column_start":20,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":159},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\rahul.damani\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.4\\src\\lib.rs","byte_start":62496,"byte_end":62508,"line_start":2209,"line_end":2209,"column_start":20,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":178},"to":{"krate":0,"index":18}}]}